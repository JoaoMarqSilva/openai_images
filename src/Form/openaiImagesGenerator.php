<?php

namespace Drupal\openai_images\Form;

use GuzzleHttp\Client;
use Drupal\media\Entity\Media;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\File\FileSystemInterface;
use GuzzleHttp\Exception\RequestException;

/**
 * Build openAI images generator form.
 */
class openaiImagesGenerator extends FormBase
{
  public function getFormId()
  {
    return 'openAi_images_generator';
  }

  /**
   * {@inheritdoc}
   */
  protected function getEditableConfigNames()
  {
    return ['openai_images.settings'];
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state)
  {
    // Check if there is an API key if not disable the form.
    $api_key = $this->config('openai_images.settings')->get('api_key');
    $is_disabled = empty($api_key);

    // Attach a library to the form
    $form['#attached']['library'][] = 'openai_images/openai_images_form_styles';

    // Main container for the options.
    $form['generator_container'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['generator_container'],
      ],
    ];

    // Left side container with the prompt, size and Image generator button.
    $form['generator_container']['left_group'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['left_group', 'grouping'],
      ],
    ];

    // Change the prompt description if there is no API key in the configurations.
    if ($is_disabled) {
      $promp_description = $this->t('The API key is required to interface with OpenAI services. GO the the configuration page <a href="@link" target="_self">OpenAI configurations</a>.', ['@link' => '/admin/config/media/openai_images_settings']);
    } else {
      $promp_description = $this->t('Write a descriptive text of the image you want and click on generate image to get the result.');
    }

    // Prompt used for the ai to generate and image.
    $form['generator_container']['left_group']['prompt'] = [
      '#type' => 'textarea',
      '#title' => $this->t('Prompt'),
      '#required' => TRUE,
      '#disabled' => $is_disabled,
      '#description' => $promp_description,
    ];

    // Grouping the size and image generator button to have them on the same line.
    $form['generator_container']['left_group']['options_group'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['options_group'],
      ],
    ];

    // Model to use for generating the image.
    $form['generator_container']['left_group']['options_group']['model'] = [
      '#type' => 'select',
      '#title' => $this->t('Model'),
      '#options' => [
        'dall-e-3' => 'DALL•E 3',
        'dall-e-2' => 'DALL•E 2',
      ],
      '#default_value' => 'dall-e-3',
      '#description' => $this->t('Select which model should be used.'),
    ];

    // Sizes available for images generated.
    $form['generator_container']['left_group']['options_group']['size'] = [
      '#type' => 'select',
      '#title' => $this->t('Size'),
      '#options' => [
        '1024x1024' => '1024 x 1024',
        '512x512' => ' 512 x 512',
        '256x256' => '256 x 256',
      ],
      '#default_value' => '512x512',
      '#description' => $this->t('Select one of the available image sizes generated by openAI.'),
      '#states' => [
        'visible' => [
          'select[name="model"]' => ['value' => 'dall-e-2'],
        ],
      ],
    ];

    // Sizes available for images generated.
    $form['generator_container']['left_group']['options_group']['size3'] = [
      '#type' => 'select',
      '#title' => $this->t('Size'),
      '#options' => [
        '1024x1024' => '1024 x 1024',
        '1024x1792' => '1024 x 1792',
        '1792x1024' => '1792 x 1024',
      ],
      '#default_value' => '1024x1024',
      '#description' => $this->t('Select one of the available image sizes generated by openAI.'),
      '#states' => [
        'visible' => [
          'select[name="model"]' => ['value' => 'dall-e-3'],
        ],
      ],
    ];

    // Grouping the size and image generator button to have them on the same line.
    $form['generator_container']['left_group']['options_group']['generator_button'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['generator_button'],
      ],
    ];

    // Generate image button to send prompt to ai and get the result.
    $form['generator_container']['left_group']['options_group']['generator_button']['generate_image'] = [
      '#type' => 'button',
      '#value' => $this->t('Generate Image'),
      '#disabled' => $is_disabled,
      '#ajax' => [
        'callback' => '::generateImageAjaxCallback',
        'event' => 'click',
        'wrapper' => 'image-preview',
        'progress' => [
          'type' => 'throbber',
          'message' => $this->t('Generating image...'),
        ],
      ],
    ];

    // Right side container with the image preview.
    $form['generator_container']['right_group'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['right_group', 'grouping'],
      ],
    ];

    // Wrapper to preview the image returned by the ai.
    $form['generator_container']['right_group']['image_preview'] = [
      '#type' => 'container',
      '#attributes' => [
        'id' => 'image-preview',
        'class' => ['image_preview_zone'],
        'data-img' => '',
      ],
      '#prefix' => '<div id="image-preview-wrapper">',
      '#suffix' => '</div>',
    ];

    // Button to save the image as media.
    $form['save_images'] = [
      '#type' => 'submit',
      '#value' => $this->t('Save Image'),
      '#attributes' => [
        'id' => 'edit-save-images',
        'disabled' => 'disabled',
      ],
    ];

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function validateForm(array &$form, FormStateInterface $form_state)
  {
    // Perform any additional form validation if needed.
    parent::validateForm($form, $form_state);
  }

  /**
   * {@inheritdoc}
   */
  public function generateImageAjaxCallback(array &$form, FormStateInterface $form_state)
  {
    $response = new AjaxResponse();

    $prompt = $form_state->getValue('prompt');
    $model = $form_state->getValue('model');
    if ($model === 'dall-e-3') {
      $size = $form_state->getValue('size3');
    }
    else {
      $size = $form_state->getValue('size');
    }
    $generated_images = $this->generateImagesFromOpenAI($prompt, $size, $model);

    if ($generated_images == "You must provide a prompt.") {
      // Change the image container class.
      $response->addCommand(new InvokeCommand('#image-preview', 'addClass', ['warning_img']));
      $response->addCommand(new InvokeCommand('#image-preview', 'removeClass', ['error_img']));
      $response->addCommand(new InvokeCommand('#image-preview', 'attr', ['data-text', "I'm sorry, but in order to proceed you must furnish a prompt."]));
    } else if ($generated_images == "Your request was rejected as a result of our safety system. Your prompt may contain text that is not allowed by our safety system.") {
      // Change the image container class.
      $response->addCommand(new InvokeCommand('#image-preview', 'addClass', ['error_img']));
      $response->addCommand(new InvokeCommand('#image-preview', 'tremoveClass', ['warning_img']));
      $response->addCommand(new InvokeCommand('#image-preview', 'attr', ['data-text', "I'm afraid your appeal has been declined due to the safety protocols. Your prompt may encompass text that falls outside the permissible bounds of the safety system."]));
    } else if ($generated_images == "Billing hard limit has been reached") {
      // Change the image container class.
      $response->addCommand(new InvokeCommand('#image-preview', 'addClass', ['warning_img']));
      $response->addCommand(new InvokeCommand('#image-preview', 'removeClass', ['error_img']));
      $response->addCommand(new InvokeCommand('#image-preview', 'attr', ['data-text', 'We have attained the maximum threshold for billing resources. Further proceedings are hereby restricted.']));
    } else {
      // Generate the image, get the image data.
      $generated_image_data = $generated_images[0]['b64_json'];

      // Create a new image element with the generated image data.
      $image_element = [
        '#type' => 'html_tag',
        '#tag' => 'img',
        '#attributes' => [
          'src' =>  'data:image/jpeg;base64,' .  $generated_image_data,
        ],
      ];

      // Wrap the image element with the updated image data in a container.
      $image_wrapper = [
        '#type' => 'container',
        '#attributes' => [
          'id' => 'image-preview',
          'class' => ['image_preview_zone'],
          'data-img' => $generated_image_data,
        ],
        '#prefix' => '<div id="image-preview-wrapper">',
        '#suffix' => '</div>',
      ];
      $image_wrapper['image_element'] = $image_element;

      // Replace the entire image preview wrapper with the updated container.
      $response->addCommand(new ReplaceCommand('#image-preview-wrapper', $image_wrapper));

      // Enable the "Save Images" button.
      $response->addCommand(new InvokeCommand('#edit-save-images', 'removeAttr', ['disabled']));
      $response->addCommand(new InvokeCommand('#edit-save-images', 'removeClass', ['is-disabled']));

      // Store the AJAX response in a temporary storage.
      \Drupal::service('tempstore.private')->get('openai_images')->set('generated_image_uri', $generated_image_data);
    }
    return $response;
  }

  /**
   * {@inheritdoc}
   */
  private function generateImagesFromOpenAI($prompt, $size, $model = 'dall-e-2')
  {
    // Get the API key.
    $api_key = $this->config('openai_images.settings')->get('api_key');

    // Make a request to the OpenAI API to generate the images.
    $client = new Client();

    try {
      $response = $client->post('https://api.openai.com/v1/images/generations', [
        'headers' => [
          'Authorization' => 'Bearer ' . $api_key,
          'Content-Type' => 'application/json',
        ],
        'json' => [
          'model' => $model,
          'prompt' => $prompt,
          'n' => 1,
          'size' => $size,
          'response_format' => 'b64_json',
        ],
      ]);

      // Handle the API response.
      $statusCode = $response->getStatusCode();
      if ($statusCode === 200) {
        $data = json_decode($response->getBody()->getContents(), TRUE);
        $generated_images = [];
        $response->created;
        foreach ($data['data'] as $image) {
          $generated_images[] = [
            'b64_json' => $image['b64_json'],
          ];
        }
        return $generated_images;
      }
    } catch (RequestException $e) {
      if ($e->hasResponse()) {
        $response = $e->getResponse();
        $statusCode = $response->getStatusCode();
        $data = json_decode($response->getBody()->getContents(), TRUE);
        return $data['error']['message'];
      }
    }

    return [];
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state)
  {
    // Retrieve the stored image data.
    $base64Image = \Drupal::service('tempstore.private')->get('openai_images')->get('generated_image_uri');

    // Convert the Base64 data to binary data.
    $binaryData = base64_decode($base64Image);

    // Generate a unique filename.
    $filename = 'ai_generated_image_' . uniqid() . '.jpg';

    // Save the file entity.
    $file_path = 'public://' . $filename;
    $file = \Drupal::service('file.repository')->writeData($binaryData, $file_path, FileSystemInterface::EXISTS_REPLACE);

    if ($file) {
      // Create a media entity
      $media = Media::create([
        'bundle' => 'image',
        'field_media_image' => [
          'target_id' => $file->id(),
        ],
      ]);

      // Save the media entity.
      $media->save();

      // Display a success message.
      $this->messenger()->addMessage(t('The generated image has been successfully saved as media entity.'));

      // Redirect to the media library.
      $form_state->setRedirect('entity.media.collection');
    } else {
      // Display an error message.
      $this->messenger()->addError(t('It seems I have failed to save the image.'));
    }
  }
}
