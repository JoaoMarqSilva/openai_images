<?php

namespace Drupal\openai_images\Form;

use Drupal\Core\Url;
use GuzzleHttp\Psr7\Request;
use Drupal\file\Entity\File;
use Drupal\media\Entity\Media;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use GuzzleHttp\Psr7\MultipartStream;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\File\FileSystemInterface;
use GuzzleHttp\Exception\RequestException;

/**
 * Build openAI images generator form.
 */
class openaiImagesVariations extends FormBase
{
  public function getFormId()
  {
    return 'openAi_images_variations';
  }

  /**
   * {@inheritdoc}
   */
  protected function getEditableConfigNames()
  {
    return ['openai_images.settings'];
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state)
  {
    // Check if there is an API key if not disable the form.
    $api_key = $this->config('openai_images.settings')->get('api_key');;
    $is_disabled = empty($api_key);

    // Attach a library to the form
    $form['#attached']['library'][] = 'openai_images/openai_images_form_styles';

    // Main container for the options.
    $form['generator_container'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['generator_container'],
      ],
    ];

    // Left side container with the prompt, size and Image generator button.
    $form['generator_container']['left_group'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['left_group', 'grouping'],
      ],
    ];

    // Grouping the size and image generator button to have them on the same line.
    $form['generator_container']['left_group']['image_group'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['image_group'],
      ],
    ];

    // Change the prompt description if there is no API key in the configurations.
    if ($is_disabled) {
      $promp_description = $this->t('The API key is required to interface with OpenAI services. GO the the configuration page <a href="@link" target="_self">OpenAI configurations</a>.', ['@link' => '/admin/config/media/openai_images_settings']);
    } else {
      $promp_description = $this->t('Upload and image to generate a variation of it. Must be a valid PNG file, less than 4MB, and square.');
    }

    $form['generator_container']['left_group']['image_group']['image_file'] = [
      '#type' => 'managed_file',
      '#title' => 'Load and image file',
      '#name' => 'image_file',
      '#description' => $promp_description,
      '#disabled' => $is_disabled,
      '#required' => TRUE,
      '#upload_location' => 'public://',
      '#upload_validators' => array(
        'file_validate_extensions' => ['png'],
        'file_validate_size' => [4e+6],
      ),
      '#theme' => 'image_widget',
      '#preview_image_style' => 'large',
    ];

    // Wrapper to preview the image returned by the ai.
    $form['generator_container']['left_group']['image_group']['image_variation_preview'] = [
      '#type' => 'container',
      '#attributes' => [
        'id' => 'image-variation-preview',
        'class' => ['image_variation_preview_zone'],
        'data-img' => '',
      ],
      '#prefix' => '<div id="image-variation-preview-wrapper">',
      '#suffix' => '</div>',
    ];

    // Grouping the size and image generator button to have them on the same line.
    $form['generator_container']['left_group']['options_group'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['options_group'],
      ],
    ];

    // Sizes available for images generated.
    $form['generator_container']['left_group']['options_group']['size'] = [
      '#type' => 'select',
      '#title' => $this->t('Size'),
      '#options' => [
        '1024x1024' => t('1024 x 1024'),
        '512x512' => t('512 x 512'),
        '256x256' => t('256 x 256'),
      ],
      '#default_value' => '512x512',
      '#description' => $this->t('Select one of the available image sizes generated by openAI.'),
    ];

    // Grouping the size and image generator button to have them on the same line.
    $form['generator_container']['left_group']['options_group']['generator_button'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['generator_button'],
      ],
    ];

    // Generate image button to send prompt to ai and get the result.
    $form['generator_container']['left_group']['options_group']['generator_button']['generate_image'] = [
      '#type' => 'button',
      '#value' => $this->t('Generate variation'),
      '#disabled' => $is_disabled,
      '#ajax' => [
        'callback' => '::generateImageVariationAjaxCallback',
        'event' => 'click',
        'wrapper' => 'image-variation-preview',
        'progress' => [
          'type' => 'throbber',
          'message' => $this->t('Generating variation...'),
        ],
      ],
    ];

    // Right side container with the image preview.
    $form['generator_container']['right_group'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['right_group', 'grouping'],
      ],
    ];

    // Wrapper for the module logo.
    $form['generator_container']['right_group']['image_preview'] = [
      '#type' => 'container',
      '#attributes' => [
        'id' => 'image-preview',
        'class' => ['image_preview_zone'],
      ],
      '#prefix' => '<div id="image-preview-wrapper">',
      '#suffix' => '</div>',
    ];

    // Button to save the image as media.
    $form['save_images'] = [
      '#type' => 'submit',
      '#value' => $this->t('Save image'),
      '#attributes' => [
        'id' => 'edit-save-images',
        'disabled' => 'disabled',
      ],
    ];

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function validateForm(array &$form, FormStateInterface $form_state)
  {
    // Perform any additional form validation if needed.
    parent::validateForm($form, $form_state);
  }

  /**
   * {@inheritdoc}
   */
  public function generateImageVariationAjaxCallback(array &$form, FormStateInterface $form_state)
  {
    $response = new AjaxResponse();

    $image = $form_state->getValue('image_file');
    $image_id = (int)$image[0];
    $image_file = File::load($image_id);
    $image_file = $image_file->getFileUri();
    $size = $form_state->getValue('size');

    // Generate the image variation and get the image data.
    $generated_images = $this->generateVariationFromOpenAI($image_file, $size);

    if ($generated_images == "Billing hard limit has been reached") {
      // Change the image container class.
      $response->addCommand(new InvokeCommand('#image-preview', 'addClass', ['warning_img']));
      $response->addCommand(new InvokeCommand('#image-preview', 'removeClass', ['error_img']));
      $response->addCommand(new InvokeCommand('#image-preview', 'attr', ['data-text', 'We have attained the maximum threshold for billing resources. Further proceedings are hereby restricted.']));
    } else if (!empty($generated_images)) {
      // Create a new image element with the generated image data.
      $image_variation_element = [
        '#type' => 'html_tag',
        '#tag' => 'img',
        '#attributes' => [
          'src' =>  'data:image/jpeg;base64,' .  $generated_images,
        ],
      ];

      // Wrap the image element with the updated image data in a container.
      $image_variation_wrapper = [
        '#type' => 'container',
        '#attributes' => [
          'id' => 'image-variation-preview',
          'class' => ['image_variation_preview_zone'],
          'data-img' => $generated_images,
        ],
        '#prefix' => '<div id="image-variation-preview-wrapper">',
        '#suffix' => '</div>',
      ];
      $image_variation_wrapper['image_variation_element'] = $image_variation_element;

      // Replace the entire image preview wrapper with the updated container.
      $response->addCommand(new ReplaceCommand('#image-variation-preview-wrapper', $image_variation_wrapper));


      // Enable the "Save Images" button.
      $response->addCommand(new InvokeCommand('#edit-save-images', 'removeAttr', ['disabled']));
      $response->addCommand(new InvokeCommand('#edit-save-images', 'removeClass', ['is-disabled']));

      // // Store the AJAX response in a temporary storage.
      \Drupal::service('tempstore.private')->get('openai_images')->set('variation_image_uri', $generated_images);
    }
    return $response;
  }

  /**
   * {@inheritdoc}
   */
  private function generateVariationFromOpenAI($image_file, $size)
  {
    // Get the API key.
    $api_key = $this->config('openai_images.settings')->get('api_key');

    // Read the image file and convert it to content.
    $file_url = \Drupal::service('file_system')->realpath($image_file);
    $image_data = file_get_contents($file_url);

    // Prepare the form data
    $multipart_data = [
      [
        'name' => 'image',
        'contents' => $image_data,
        'filename' => 'image.png',
      ],
      [
        'name' => 'n',
        'contents' => '1',
      ],
      [
        'name' => 'size',
        'contents' => $size,
      ],
      [
        'name' => 'response_format',
        'contents' => 'b64_json',
      ],
    ];

    try {
      // Create the multipart stream.
      $stream = new MultipartStream($multipart_data);

      // Create a new Guzzle HTTP client.
      $client = \Drupal::httpClient();

      // Prepare the request.
      $request = new Request('POST', 'https://api.openai.com/v1/images/variations', [
        'Authorization' => 'Bearer ' . $api_key,
        // 'Content-Type' => 'multipart/form-data',
      ], $stream);

      // Send the request.
      $response = $client->send($request);

      // Get data.
      $data = json_decode($response->getBody()->getContents());
      $generated_images = $data->data[0]->b64_json;
      return $generated_images;
    } catch (RequestException $e) {
      if ($e->hasResponse()) {
        $response = $e->getResponse();
        $data = json_decode($response->getBody()->getContents(), TRUE);
        var_dump('CATCH');
        var_dump($data['error']['message']);
        return $data['error']['message'];
      }
    }
    return [];
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state)
  {
    // Retrieve the stored image data.
    $base64Image = \Drupal::service('tempstore.private')->get('openai_images')->get('variation_image_uri');

    // Convert the Base64 data to binary data.
    $binaryData = base64_decode($base64Image);

    // Generate a unique filename.
    $filename = 'ai_generated_variation_' . uniqid() . '.jpg';

    // Save the file entity.
    $file_path = 'public://' . $filename;
    $file = \Drupal::service('file.repository')->writeData($binaryData, $file_path, FileSystemInterface::EXISTS_REPLACE);

    if ($file) {
      // Create a media entity
      $media = Media::create([
        'bundle' => 'image',
        'field_media_image' => [
          'target_id' => $file->id(),
        ],
      ]);

      // Save the media entity.
      $media->save();

      // Display a success message.
      $this->messenger()->addMessage(t('The generated image has been successfully saved as media entity.'));

      // Redirect to the media library.
      $form_state->setRedirect('entity.media.collection');
    } else {
      // Display an error message.
      $this->messenger()->addError(t('It seems I have failed to save the image.'));
    }
  }
}
