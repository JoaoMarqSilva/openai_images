<?php

use Drupal\Component\Utility\DeprecationHelper;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function openai_images_help($route_name)
{
    // Main module help for the openai_images module.
    switch ($route_name) {
        case 'help.page.openai_images':
            $output = '';
            $output .= '<h3>' . t('About the module:') . '</h3>';
            $output .= '<p>' . t('The openAI images is a Drupal module that leverages the OpenAI API to generate images from text descriptions. With this module, you can effortlessly transform textual content into visually appealing images, enhancing the overall user experience on your Drupal website.') . '</p>';
            $output .= '<p>' . t('To obtain an OpenAI API key, please follow these steps-.') . '</p>';
            $output .= '<ul><li>' . t('Visit in your OpenAI account the API section at <a href="@link" target="_blank">platform.openai.com</a>.', ['@link' => 'https://platform.openai.com/']) . '</li>';
            $output .= '<li>' . t('Go to the API section at <a href="@link" target="_blank">platform.openai.com/account/api-keys</a>.', ['@link' => 'https://platform.openai.com/account/api-keys']) . '</li>';
            $output .= '<li>' . t('Click on "+Create new secret key"') . '</li>';
            $output .= '<li>' . t('Copy the generated API key') . '</li></ul>';
            return $output;
        default:
    }
}

/**
 * Implements hook_preprocess_image_widget().
 */
function openai_images_preprocess_image_widget(&$variables)
{
    $element = $variables['element'];

    $variables['attributes'] = array('class' => array('image-widget', 'js-form-managed-file', 'form-managed-file', 'clearfix'));

    if (!empty($element['fids']['#value'])) {
        $file = reset($element['#files']);
        if (!class_exists(DeprecationHelper::class)) {
            // @phpstan-ignore-next-line
            $formatted_size = format_size($file->getSize());
        }
        else {
            $formatted_size = DeprecationHelper::backwardsCompatibleCall(
                \Drupal::VERSION,
                '10.2.0',
                fn () => \Drupal\Core\StringTranslation\ByteSizeMarkup::create($file->getSize()),
                fn () => format_size($file->getSize()),
            );
        }
        $element['file_' . $file->id()]['filename']['#suffix'] = ' <span class="file-size">(' . $formatted_size . ')</span> ';
        $file_variables = array(
            'style_name' => $element['#preview_image_style'],
            'uri' => $file->getFileUri(),
        );

        // Determine image dimensions.
        if (isset($element['#value']['width']) && isset($element['#value']['height'])) {
            $file_variables['width'] = $element['#value']['width'];
            $file_variables['height'] = $element['#value']['height'];
        } else {
            $image = \Drupal::service('image.factory')->get($file->getFileUri());
            if ($image->isValid()) {
                $file_variables['width'] = $image->getWidth();
                $file_variables['height'] = $image->getHeight();
            } else {
                $file_variables['width'] = $file_variables['height'] = NULL;
            }
        }

        $element['preview'] = array(
            '#weight' => -10,
            '#theme' => 'image_style',
            '#width' => $file_variables['width'],
            '#height' => $file_variables['height'],
            '#style_name' => $file_variables['style_name'],
            '#uri' => $file_variables['uri'],
        );

        // Store the dimensions in the form so the file doesn't have to be
        // accessed again. This is important for remote files.
        $element['width'] = array(
            '#type' => 'hidden',
            '#value' => $file_variables['width'],
        );
        $element['height'] = array(
            '#type' => 'hidden',
            '#value' => $file_variables['height'],
        );
    }

    $variables['data'] = [];
    foreach (Element::children($element) as $child) {
        $variables['data'][$child] = $element[$child];
    }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function openai_images_menu_local_tasks_alter(&$data, $route_name)
{
    if ($route_name == 'openai_images.generator' || $route_name == 'openai_images.variations') {
        // Add an additional tabs to the primary local tasks.
        $data['tabs'][0]['image_generator'] = [
            '#theme' => 'menu_local_task',
            '#link' => [
                'title' => t('Image Generator'),
                'url' => Url::fromRoute('openai_images.generator'),
                'localized_options' => [],
            ],
            '#weight' => 10,
        ];
        $data['tabs'][0]['image_variation'] = [
            '#theme' => 'menu_local_task',
            '#link' => [
                'title' => t('Image Variation'),
                'url' => Url::fromRoute('openai_images.variations'),
                'localized_options' => [],
            ],
            '#weight' => 10,
        ];
    }
}
